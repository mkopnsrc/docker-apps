services:
  # Traefik service
  traefik:
    image: docker.io/library/traefik:latest
    container_name: traefik
    env_file: .env
    environment:
      - TZ=America/New_York
    command:
      - "--api=true"  # Enable Traefik dashboard API
      #- "--api.insecure=true"
      #- "--api.dashboard=true"
      - "--providers.docker=true"  # Enable Traefik to manage Docker containers
      - "--providers.docker.exposedbydefault=false"  # Disable exposing all containers by default
      - "--entrypoints.web.address=:80"  # Define entrypoint for HTTP traffic on port 80
      - "--entrypoints.websecure.address=:443"  # Define entrypoint for HTTPS traffic on port 443
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"  # Redirect HTTP to HTTPS
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"  # Ensure redirection uses HTTPS
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      #- "--entrypoints.websecure.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS"
      #- "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"  # Enable TLS challenge for Let's Encrypt certificates
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"  # Enable DNS challenge for Let's Encrypt certificates
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"  # Use Cloudflare for DNS challenge
      - "--certificatesresolvers.letsencrypt.acme.email=support@${ROOT_DOMAIN}"  # Email for Let's Encrypt notifications
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"  # Path to store Let's Encrypt certificates
      - "--entryPoints.https.transport.respondingTimeouts.idleTimeout=7200"
      - "--entryPoints.https.transport.respondingTimeouts.readTimeout=7200"
      - "--entryPoints.https.transport.respondingTimeouts.writeTimeout=7200"
      #- "--experimental.plugins.cloudflarewarp.modulename=github.com/PseudoResonance/cloudflarewarp"
      #- "--experimental.plugins.cloudflarewarp.version=v1.4.0"
      # Cloudflare Public Proxy TrustedIPs
      - "--entrypoints.web.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22"
      - "--entrypoints.websecure.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22"
      - "--log=true"
      - "--log.filePath=/logs/traefik.log"
      - "--accessLog=true"
      - "--accessLog.filePath=/logs/access.log"
    ports:
      - "80:80"  # Expose HTTP port 80
      - "443:443"  # Expose HTTPS port 443
      - "8889:8080"  # Expose Traefik dashboard on port 8080
    volumes:
      - traefik-logs:/logs
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"  # Enable Traefik for this service
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik1.${ROOT_DOMAIN}`)"  # Define routing rule for Traefik dashboard
      - "traefik.http.routers.traefik-dashboard.service=api@internal"  # Use Traefik's internal API as the service for the dashboard
      - "traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080"  # Expose Traefik dashboard on port 8080
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"  # Use the HTTPS entrypoint for the dashboard
      - "traefik.http.routers.traefik-dashboard.tls=true"  # Enable TLS (HTTPS) for the dashboard
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"  # Use Let's Encrypt DNS challenge for certificate
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_BASIC_AUTH}"  # Secure the Traefik dashboard with Basic Auth
      - "traefik.http.routers.traefik-dashboard.middlewares=dashboard-auth"  # Apply Basic Auth middleware to the dashboard
      - "traefik.http.middlewares.realip.headers.customrequestheaders.X-Real-IP=X-Forwarded-For"
      - "traefik.http.middlewares.realip.headers.customrequestheaders.X-Forwarded-For=X-Forwarded-For"
      - "traefik.http.middlewares.traefik-ratelimit.ratelimit.average=100"
      - "traefik.http.middlewares.traefik-ratelimit.ratelimit.burst=200"
      - "traefik.http.middlewares.traefik-ratelimit.ratelimit.period=1m"
      - "traefik.http.middlewares.traefik-ratelimit.ratelimit.sourcecriterion.ipstrategy.excludedips=127.0.0.1/32,192.168.1.1/24,172.16.1.1/24"
      - "traefik.http.middlewares.testHeader.headers.framedeny=true"
      - "traefik.http.middlewares.testHeader.headers.browserxssfilter=true"
      #- "traefik.http.middlewares.cloudflarewarp.plugin.cloudflarewarp.disableDefault=false"
    restart: unless-stopped
    networks:
      - net_linkwarden

  # Linkwarden service
  linkwarden:
    image: ghcr.io/linkwarden/linkwarden:latest
    deploy:
      mode: replicated
      replicas: 2  # Scale Linkwarden to 2 replicas
    container_name: linkwarden
    labels:
      - "traefik.enable=true"  # Enable Traefik for Linkwarden
      - "traefik.http.services.linkwarden.loadbalancer.server.port=3000"  # Linkwarden runs on port 3000 internally
      - "traefik.http.services.linkwarden.loadbalancer.server.scheme=http"
      - "traefik.http.services.linkwarden.loadbalancer.healthcheck.interval=60s"
      - "traefik.http.services.linkwarden.loadbalancer.healthcheck.timeout=10s"
      - "traefik.http.routers.linkwarden.rule=Host(`links.${ROOT_DOMAIN}`)"  # Define routing rule for Linkwarden
      - "traefik.http.routers.linkwarden.entrypoints=websecure"  # Use the HTTPS entrypoint for Linkwarden
      - "traefik.http.routers.linkwarden.tls=true"  # Enable TLS (HTTPS) for Linkwarden
      - "traefik.http.routers.linkwarden.tls.certresolver=letsencrypt"  # Use Let's Encrypt DNS challenge for certificate
      #- "traefik.http.middlewares.linkwarden-redirect.redirectscheme.scheme=https"  # Redirect HTTP to HTTPS
      #- "traefik.http.routers.linkwarden.middlewares=linkwarden-redirect"  # Apply redirection middleware to Linkwarden
      - "com.centurylinklabs.watchtower.enable=true"
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@linkwarden-db:5432/linkwarden
      - PORT=3000
      - NEXT_PUBLIC_DISABLE_REGISTRATION=
      - PAGINATION_TAKE_COUNT=20
      - AUTOSCROLL_TIMEOUT=0
      - STORAGE_FOLDER=/data
      - TZ=America/New_York
    volumes:
      - linkwarden-data:/data
    restart: unless-stopped
    depends_on:
      linkwarden-db:
        condition: service_healthy
    networks:
      - net_linkwarden

  # PostgreSQL for Linkwarden
  linkwarden-db:
    image: docker.io/library/postgres
    container_name: linkwarden-db
    env_file: .env
    environment:
      - TZ=America/New_York
    volumes:
      - linkwarden-db:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - net_linkwarden

  # Watchtower service (auto-updates containers)
  watchtower:
    image: docker.io/containrrr/watchtower
    container_name: watchtower
    command:
      - "--label-enable"
      #- "--interval"
      #- "30"
      - "--rolling-restart"
    environment:
      - WATCHTOWER_CLEANUP=true  # Remove old Docker images after updating
      - WATCHTOWER_POLL_INTERVAL=300  # Poll for updates every 5 minutes (300 seconds)
      - TZ=America/New_York
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  traefik-logs:
  linkwarden-db:
  linkwarden-data:
  letsencrypt:
networks:
  net_linkwarden:
    driver: bridge
